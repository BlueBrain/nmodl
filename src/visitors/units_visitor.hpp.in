/*************************************************************************
 * Copyright (C) 2018-2019 Blue Brain Project
 *
 * This file is part of NMODL distributed under the terms of the GNU
 * Lesser General Public License. See top-level LICENSE file for details.
 *************************************************************************/

#pragma once

#include "ast/ast.hpp"
#include "parser/unit_driver.hpp"
#include "visitors/ast_visitor.hpp"
#include "visitors/visitor_utils.hpp"
#include <cstdlib>
#include <sstream>
#include <string>
#include <vector>

namespace nmodl {

/**
 * \class UnitsVisitor
 * \brief Visitor for Units blocks of AST
 *
 * This is simple example of visitor that uses base AstVisitor
 * interface. We override visit_program, visit_unit_def and visit_factor_def method.
 * Furthermore it keeps the UnitDriver to parse the units file and the
 * strings generated by the units in the mod files.
 */

class UnitsVisitor: public AstVisitor {
  private:
    /// flag to enable/disable printing nodes and the produced strings that are passed to the unit
    /// parser as we visit them
    bool verbose = false;

    /// Units Driver needed to parse the units file and the string produces by mod files' units
    parser::UnitDriver unit_driver;


  public:
    UnitsVisitor() = default;

    UnitsVisitor(bool flag) {
        verbose = flag;
    }

    void visit_unit_def(ast::UnitDef* node) override;
    void visit_factor_def(ast::FactorDef* node) override;

    void visit_program(ast::Program* node) override {
        unit_driver.parse_file("@NMODLUNIT@");
        node->visit_children(this);
    }
};

}  // namespace nmodl