# *********************************************************************
# Copyright (C) 2018-2019 Blue Brain Project
#
# This file is part of NMODL distributed under the terms of the GNU
# Lesser General Public License. See top-level LICENSE file for details.
# *********************************************************************

######################### NMODL Abstract Language Definition ##############################
#
# PURPOSE
# =======
#
# Lot of information about language constructs is necessary at various stages
# like AST definitions, visitors implementation, source-to-source transformations
# etc. In case of small changes in grammar or AST definition, especially
# during development stage, we have to re-write considerable part of the code.
# The idea of "abstract" language definition is to define framework that can automatically
# generate part of this "mechanical" code. This approach has been used in some open source
# projects (e.g. compiler design courses, TableGen format in LLVM).
#
# During first prototyping phase we defined simple text rules inspired by compiler course
# assignment available at jazariethach/project6_CS160.git (no longer available on github).
#
# The basic format of the every construct specification was:
#
#       BaseType:ChildType => MemberType<member_name>
#
# Here "ChildType" is a new AST class that we are defining. "ParentType" is the base class,
# "MemberType" is the type of member variable with variable name "member_name". The name is
# specified in the angle braces "< >". This will generate C++ class definition like :
#
#       class ChildType : public BaseType {
#         private:
#           MemberType member_name;
#       };
#
# This specification format was sufficient for first AST design but as we started
# implementing more features and compiler passes, we need to add more information to language
# definition. For example, we need to make certain members vector, some are optional, some need
# specific method (getter/setter) etc. In the future we may need to make certain members private.
# Above text definition is limiting if we have to accomodate future enhancements.
#
# To overcome above limitation, we are moving to YAML definition format. This allows easy
# extension to language construct. For example, new properties could be easily added to
# exisiting specification.
#
#
# NOTE
# ====
#
# Old text specification has been converted to YAML format. The old documentation has information
# about how/why specific types were choosen for AST. You can find that documentation in the older
# commits of this file (e.g. a0a20e277ccf26752af4f648c245b4e06a44af20).
#
# YAML BASED RULE SPECIFICATION
# =============================
#
# Text based specification described above is very limiting in terms adding extra properties.
# YAML based specification allows easy addition of new properties. Below are some comments
# about the properties and specification :
#
# 1.  Every key in YAML specification is AST node
# 2.  The hierarchy defines parent-child class relationship
# 3.  members is an array of member variables of the class
# 4.  optional : indicates if variable is optional in bison specification (i.e. pointer)
# 5.  type : type of the member
# 6.  vector : if member variable is std::vector type
# 7.  prefix/suffix :
#         value  : indicates the value (i.e. string here) of prefix/suffix itself
#         force  : print value always even if member if null pointer itself (e.g. arguments)
# 8.  separator : for the vector data type, the separator for prinitng elements
# 9.  node_name : add get_node_name() method to class and return corresponding value as name
# 10. add : need to have addMemberType method for corresponding variable (todo : remove this)
# 11. order of the members is important and determines how constructors/nmodl visitor get
#     defined from python code generators.
#
# TODO : Add detailed information about YAML specification by porting old text based rule
# specification

## @package nmodl_yaml
#  Specification of NMODL in YAML format
#

- Ast:
    brief: "Top level AST base class"
    description: |
                  Ast is a top level, abstract base class defining the interface
                  for all nodes of Abstract Syntax Tree (AST).
    children:
      - Node:
          brief: "Base class for all AST node"
          description: |
                  Base class for all nodes in the AST. This can replace ast::Ast in
                  the next refactoring.
          children:
            - Expression:
                brief: "Base class for all expressions in the NMODL"
                description: |
                        Base class for all expression types. This is one of the top level node
                        in the AST representing higher level expression constructs. %Expressions
                        can be a variable itself or complex binary expressions.

                        \sa ast::Statement
                children:
                  - String:
                      members:
                        - value:
                            brief: "value of string"
                            type: std::string
                      brief: "Represents a string"
                      description: |
                              All statements encapsulating text block are stored in the AST as ast::String.
                              For example, nodes like ast::LineComment and ast::Verbatim block use ast::String::value
                              to store the underlying text:

                              \code{.mod}
                                  COMMENT
                                    This text is stored as String
                                  ENDCOMMENT

                                  VERBATIM
                                      int *x;
                                      *x = ...
                                  ENDVERBATIM
                              \endcode
                  - Number:
                      brief: "Base class for all numbers"
                      description: |
                              Base class for all number types like ast::Integer, ast::Float and ast::Double.
                      children:
                        - Integer:
                            members:
                              - value:
                                  brief: "value of integer"
                                  type: int
                              - macro:
                                  brief: "if integer is a macro then it's name"
                                  type: Name
                                  optional: true
                            brief: "Represents an integer variable"
                            description: |
                                    Non floating value in the mod file is parsed as an integer. For example,
                                    in the below code, integer literals like `0` and `11` are stored as ast::Integer
                                    in the AST :

                                    \code{.mod}
                                        FROM i=0 TO N {
                                            tau = X[i] + 11
                                        }
                                    \endcode

                                    \sa ast::Float ast::Double
                        - Float:
                            members:
                              - value:
                                  brief: "value of float"
                                  type: float
                            brief: "Represents a float variable"
                            description: |
                                    Single precision float value in the mod file can be represented by ast::Float.

                                    \note Currently every float variable in the NMODL is stored as ast::Double and hence
                                    this type is note used. This will be changed soon for variables like ast::ParamAssign.

                                    \sa ast::Integer ast::Double
                        - Double:
                            members:
                              - value:
                                  brief: "value of double"
                                  type: double
                            brief: "Represents a double variable"
                            description: |
                                    %Double precision float value in the mod file is represented by ast::Double.
                                    For example, float literals like `0.1` in the mod file are parsed as double
                                    and stored using ast::Double::value :

                                    \code{.mod}
                                        PROCEDURE foo() {
                                          LOCAL x
                                          x = 0.1 + tau
                                        }
                                    \endcode

                                    Note that the variables are not classified ast integer or float in the AST. The
                                    decision about variable types is done by code generation backends.

                                    \sa ast::Integer ast::Float
                        - Boolean:
                            members:
                              - value:
                                  brief: "value of boolean"
                                  type: int
                            brief: "Represents a boolean variable"
                            description: |
                                    %Boolean values in the mod file can be represented by ast::Boolean.

                                    \note Currently this type is used as only flag in some of the AST nodes. Similar to ast::Float,
                                    this type was introduced for data type specific code generation support in the future.
                  - Identifier:
                      brief: "Base class for all identifiers"
                      description: |
                              Base class for all variable types like ast::Name, ast::PrimeName and ast::Argument.

                              \sa ast::Number
                      children:
                        - Name:
                            members:
                              - value:
                                  brief: "value of name"
                                  type: String
                                  node_name: true
                            brief: "Represents a name"
                            description: |
                                    Whenever lexer encounters string variable, it returns a ast::Name
                                    type. So, along with ast::Integer, ast::Double ast::String and ast::PrimeName,
                                    ast::Name is one of the fundamental type in the AST. Many other variable types
                                    (e.g. ast::GlobalVar, ast::RangeVar) have underlying value stored as ast::Name.

                                    \note This node should be able to use std::string as value type instead of ast::String
                        - PrimeName:
                            members:
                              - value:
                                  brief: "name of prime variable"
                                  type: String
                                  node_name: true
                              - order:
                                  brief: "order of ODE"
                                  type: Integer
                            brief: "Represents a prime variable (for ODE)"
                            description: |
                                    In case of ODE specification, all state variables appearing on LHS
                                    with \` as suffix are parsed by lexer as ast::PrimeName. For example,
                                    in below NMODL construct, m\` is stored as ast::PrimeName with `m` as a
                                    ast::PrimeName::value and `1` as an ast::PrimeName::order.

                                    \code
                                        DERIVATIVE states {
                                          m` = m + h
                                        }
                                    \endcode

                        - IndexedName:
                            members:
                              - name:
                                  brief: "name of array variable"
                                  type: Identifier
                                  node_name: true
                              - length:
                                  brief: "legth of an array or index position"
                                  type: Expression
                                  prefix: {value: "["}
                                  suffix: {value: "]"}
                            brief: "Represents specific element of an array variable"
                            description: |
                                    If variable is declared as an array or when array element is accessed,
                                    it is stored in the ast as ast::IndexedName. For example, in below NMODL,
                                    construct `m[4]` is stored as ast::IndexedName with `m` as ast::IndexedName::name
                                    and `4` as ast::IndexedName::legth.

                                    \code
                                        STATE {
                                          m[4]
                                        }
                                    \endcode
                        - VarName:
                            members:
                              - name:
                                  brief: "name of variable"
                                  type: Identifier
                                  node_name: true
                              - at:
                                  brief: "value specified with `@`"
                                  type: Integer
                                  optional: true
                                  prefix: {value: "@"}
                              - index:
                                  brief: "index value in case of array"
                                  type: Expression
                                  optional: true
                                  prefix: {value: "["}
                                  suffix: {value: "]"}
                            brief: "Represents a variable"
                            description: |
                                    This type was introduced to store variables of different types like
                                    ast::Name or ast::IndexedName in the AST.

                                    \note With ast::Identifier as top level base class, this type can be
                                    removed in the future refactoring.
                        - Argument:
                            members:
                              - name:
                                  brief: "name of the argument"
                                  type: Identifier
                                  node_name: true
                              - unit:
                                  brief: "unit of the argument"
                                  type: Unit
                                  optional: true
                            brief: "Represents an argument to function"
                            description: |
                                    In case of function definitions from different ast nodes like ast::FunctionBlock,
                                    ast::ProcedureBlock, the arguments are store in the ast::Argument. For example,
                                    in below NMODL construct, `weight` is stored as ast::Argument::name and `uS` is
                                    stored as ast::Argument::unit:

                                    \code {.mod}
                                        NET_RECEIVE(weight (uS)) {
                                            g = g + weight
                                        }
                                    \endcode
                        - ReactVarName:
                            brief: ".."
                            members:
                              - value:
                                  brief: "..."
                                  type: Integer
                                  optional: true
                                  prefix: {value: " "}
                              - name:
                                  brief: "..."
                                  type: VarName
                                  node_name: true
                        - ReadIonVar:
                            brief: ".."
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                        - WriteIonVar:
                            brief: ".."
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                        - NonspecificCurVar:
                            brief: ".."
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                        - ElectrodeCurVar:
                            brief: ".."
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                        - SectionVar:
                            brief: ".."
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                        - RangeVar:
                            brief: ".."
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                        - GlobalVar:
                            brief: ".."
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                        - PointerVar:
                            brief: ".."
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                        - BbcorePointerVar:
                            brief: ".."
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                        - ExternVar:
                            brief: ".."
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                        - ThreadsafeVar:
                            brief: ".."
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                  - Block:
                      brief: ".."
                      children:
                        - ParamBlock:
                            nmodl: "PARAMETER "
                            members:
                              - statements:
                                  brief: "vector of parameters"
                                  type: ParamAssign
                                  vector: true
                            brief: "Represents a `PARAMETER` block in the NMODL"
                            description: |
                                    Variables whose values are normally specified by the user are parameters
                                    and are declared in a `PARAMETER` block. Here is an example :

                                    \code{.mod}
                                        PARAMETER {
                                            gkbar=.01   (mho/cm2) : Maximum Permeability
                                            d1 = .84
                                            k2 = .13e-6 (mM)
                                            abar = .28  (/ms)
                                            lcai (mV)
                                        }
                                    \endcode

                                    All parameters are stored in the ast::ParamBlock::statements as vector.

                        - StepBlock:
                            nmodl: "STEPPED "
                            members:
                              - statements:
                                  brief: "vector of statements"
                                  type: Stepped
                                  vector: true
                            brief: "Represents a `STEPPED` block in the NMODL"
                            description: |
                                    `STEPPED` has following form in the NMODL specification :

                                    \code{.mod}
                                        STEPPED {
                                            name1 = number1 (mM)
                                            name2 = number2, number3
                                        }
                                    \endcode

                                    \todo Check ModelDB and other databse for example of channel.
                        - IndependentBlock:
                            nmodl: "INDEPENDENT "
                            members:
                              - definitions:
                                  brief: "..."
                                  type: IndependentDef
                                  vector: true
                            brief: "Represents a `INDEPENDENT` block in the NMODL"
                            description: |
                                    `INDEPENDENT` has following form in the NMODL specification :

                                    \code{.mod}
                                        INDEPENDENT {
                                          t FROM 0 TO 1 WITH 1 (ms)
                                        }
                                    \endcode

                        - DependentBlock:
                            nmodl: "ASSIGNED "
                            members:
                              - definitions:
                                  brief: "vector of assigned variables"
                                  type: DependentDef
                                  vector: true
                            brief: "Represents a `ASSIGNED` block in the NMODL"
                            description: |
                                    The `ASSIGNED` block is used for declaring two kinds of variables :
                                      - those that are given values outside the mod files
                                      - those that appear on the left hand side of assignment statements within
                                        the mod file

                                    Below is an example of `ASSIGNED` block in the mod file:

                                    \code{.mod}
                                        ASSIGNED {
                                            ina     (mA/cm2)
                                            gna     (pS/um2)
                                            mtau (ms)   htau (ms)
                                            tadj
                                        }
                                    \endcode

                        - StateBlock:
                            nmodl: "STATE "
                            members:
                              - definitions:
                                  brief: "vector of state variables"
                                  type: DependentDef
                                  vector: true
                            brief: "Represents a `STATE` block in the NMODL"
                            description: |
                                  If a model involves differential equations, families of algebraic equations,
                                  or kinetic reaction schemes, their dependent variables or unknowns are to be
                                  listed in the `STATE` block. Below is an example of `STATE`:

                                    \code{.mod}
                                        STATE {
                                            m
                                            h
                                        }
                                    \endcode

                                    Note that the state variable specification has form of ast::DependentDef and
                                    hence can have associated unit specification.
                        - PlotBlock:
                            members:
                              - plot:
                                  brief: "vector of plot variables"
                                  type: PlotDeclaration
                            brief: "Represents a `PLOT` statement in the NMODL"
                            description: |
                                  `PLOT` construct doesn't have block scope but it's standalone, global scoped
                                  statement of the form:

                                    \code{.mod}
                                        PLOT name1, index_var2 VS name3
                                    \endcode

                                    \todo Check ModelDB and other databse for example of channel.

                        - InitialBlock:
                            nmodl: "INITIAL "
                            members:
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                            brief: "Represents a `INITIAL` block in the NMODL"
                            description: |
                                  The code in the `INITIAL` block is executed when the hoc function `finitialize()`
                                  is called. Here is an example :

                                    \code{.mod}
                                        INITIAL {
                                            rates(v+vshift)
                                            m = minf
                                            h = hinf
                                            tadj = q10^((celsius - temp)/10)
                                        }
                                    \endcode

                        - ConstructorBlock:
                            nmodl: "CONSTRUCTOR "
                            members:
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                            brief: "Represents a `CONSTRUCTOR` block in the NMODL"
                            description: |
                                  The code in the `CONSTRUCTOR` is called when the channel is instantiated. Like any
                                  other global block, `CONSTRUCTOR` block can have any statements. It often used with
                                  `VERBATIM` block for initialization purpose :

                                    \code{.mod}
                                        CONSTRUCTOR {
                                            VERBATIM
                                              if (ifarg(1)) { id= *getarg(1); } else { id= -1; }
                                            ENDVERBATIM
                                        }
                                    \endcode

                                    \sa ast::DestructorBlock

                        - DestructorBlock:
                            nmodl: "DESTRUCTOR "
                            members:
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                            brief: "Represents a `DESTRUCTOR` block in the NMODL"
                            description: |
                                  The code in the `DESTRUCTOR` is called when the channel instance is deleted. It often
                                  used with `VERBATIM` block for finalization purpose :

                                    \code{.mod}
                                        DESTRUCTOR {
                                            VERBATIM {
                                                nsyn = maxsyn = 0;
                                                free(PRECAST);
                                                link = 0;
                                            }
                                            ENDVERBATIM
                                        }
                                    \endcode

                                    \sa ast::ConstructorBlock
                        - StatementBlock:
                            members:
                              - statements:
                                  brief: "vector of statements"
                                  type: Statement
                                  vector: true
                                  public: true
                                  add: true
                            brief: "Represents block encapsulating list of statements"
                            description: |
                                  Statement block is used to hold list of statements between `{ }`. This
                                  represents a new block scope in the mod file and has following form :

                                    \code{.mod}
                                        {
                                            statement1
                                            {
                                              statement2
                                            }
                                        }
                                    \endcode

                                    Note that the statement blocks can be nested where inner block will
                                    be wrapped as statement with ast::ExpressionStatement.
                        - DerivativeBlock:
                            nmodl: "DERIVATIVE "
                            members:
                              - name:
                                  brief: "name of the derivative block"
                                  type: Name
                                  node_name: true
                                  suffix: {value: " "}
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                            brief: "Represents `DERIVATIVE` block in the NMODL"
                            description: |
                                  This block is used to assign values to the derivatives of those
                                  `STATE`s that are described by differential equations. The statements
                                  in this block are of the form \f$y' = expr\f$. Here is an example :

                                    \code{.mod}
                                        DERIVATIVE states {
                                            rates(v)
                                            m' =  (minf-m)/mtau
                                            h' = (hinf-h)/htau
                                        }
                                    \endcode

                        - LinearBlock:
                            nmodl: "LINEAR "
                            members:
                              - name:
                                  brief: "name of the linear block"
                                  type: Name
                                  node_name: true
                                  suffix: {value: " "}
                              - solvefor:
                                  brief: "..."
                                  type: Name
                                  vector: true
                                  separator: ","
                                  prefix: {value: " SOLVEFOR "}
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                            brief: "Represents `LINEAR` block in the NMODL"
                            description: |

                                  A set of simultaneous equations can be specified in a `LINEAR` block.
                                  Here is an example :

                                    \code{.mod}
                                        LINEAR clamp {
                                            LOCAL t1, t2
                                            t1 = tau1/dt
                                            t2 = tau2/dt
                                            ~ vi = v + fac*vo - fac*v
                                            ~ t2*vo - t2*vo0 + vo = -gain * e
                                            ~ -stim - e  +  vi - e  +  t1*vi - t1*e - t1*(vi0 - e0) = 0
                                        }
                                    \endcode

                        - NonLinearBlock:
                            nmodl: "NONLINEAR "
                            members:
                              - name:
                                  brief: "name of the non-linear block"
                                  type: Name
                                  node_name: true
                              - solvefor:
                                  brief: "name of the integration method"
                                  type: Name
                                  vector: true
                                  separator: ","
                                  prefix: {value: " SOLVEFOR "}
                                  suffix: {value: " ", force: true}
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                            brief: "Represents `NONLINEAR` block in the NMODL"
                            description: |

                                  A set of simultaneous equations can be specified in a `NONLINEAR` block.
                                  Here is an example :

                                    \code{.mod}
                                        NONLINEAR nonlin {
                                            ~ s[0] = 1
                                            ~ s[1] = 3
                                            ~ s[2] + s[1] = s[0]
                                        }
                                    \endcode

                        - DiscreteBlock:
                            brief: ".."
                            nmodl: "DISCRETE "
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                                  suffix: {value: " "}
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                        - PartialBlock:
                            brief: ".."
                            nmodl: "PARTIAL "
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                                  suffix: {value: " "}
                              - statement_block:
                                  brief: "..."
                                  type: StatementBlock
                                  getter: {override: true}
                        - FunctionTableBlock:
                            brief: ".."
                            nmodl: "FUNCTION_TABLE "
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                              - parameters:
                                  brief: "..."
                                  type: Argument
                                  vector: true
                                  prefix: {value: "(", force: true}
                                  suffix: {value: ")", force: true}
                                  separator: ", "
                                  getter: {override: true}
                              - unit:
                                  brief: "..."
                                  type: Unit
                                  optional: true
                                  prefix: {value: " "}
                        - FunctionBlock:
                            brief: ".."
                            nmodl: "FUNCTION "
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                              - parameters:
                                  brief: "..."
                                  type: Argument
                                  vector: true
                                  prefix: {value: "(", force: true}
                                  suffix: {value: ")", force: true}
                                  separator: ", "
                                  getter: {override: true}
                              - unit:
                                  brief: "..."
                                  type: Unit
                                  optional: true
                                  prefix: {value: " "}
                                  suffix: {value: " ", force: true}
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                        - ProcedureBlock:
                            brief: ".."
                            nmodl: "PROCEDURE "
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                              - parameters:
                                  brief: "..."
                                  type: Argument
                                  vector: true
                                  prefix: {value: "(", force: true}
                                  suffix: {value: ") ", force: true}
                                  separator: ", "
                                  getter: {override: true}
                              - unit:
                                  brief: "..."
                                  type: Unit
                                  optional: true
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                        - NetReceiveBlock:
                            brief: ".."
                            nmodl: "NET_RECEIVE "
                            members:
                              - parameters:
                                  brief: "..."
                                  type: Argument
                                  vector: true
                                  prefix: {value: "(", force: true}
                                  suffix: {value: ") ", force: true}
                                  separator: ", "
                                  getter: {override: true}
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                        - SolveBlock:
                            brief: ".."
                            nmodl: SOLVE
                            members:
                              - block_name:
                                  brief: "..."
                                  type: Name
                                  prefix: {value: " "}
                              - method:
                                  brief: "..."
                                  type: Name
                                  optional: true
                                  prefix: {value: " METHOD "}
                              - steadystate:
                                  brief: "..."
                                  type: Name
                                  optional: true
                                  prefix: {value: " STEADYSTATE "}
                              - ifsolerr:
                                  brief: "..."
                                  type: StatementBlock
                                  optional: true
                                  prefix: {value: " IFERROR "}
                        - BreakpointBlock:
                            brief: ".."
                            nmodl: "BREAKPOINT "
                            members:
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                        - TerminalBlock:
                            brief: ".."
                            nmodl: "TERMINAL "
                            members:
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                        - BeforeBlock:
                            brief: ".."
                            nmodl: "BEFORE "
                            members:
                              - bablock:
                                  brief: "..."
                                  type: BABlock
                        - AfterBlock:
                            brief: ".."
                            nmodl: "AFTER "
                            members:
                              - bablock:
                                  brief: "..."
                                  type: BABlock
                        - BABlock:
                            brief: ".."
                            members:
                              - type:
                                  brief: "..."
                                  type: BABlockType
                                  suffix: {value: " "}
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                        - ForNetcon:
                            brief: ".."
                            nmodl: "FOR_NETCONS "
                            members:
                              - parameters:
                                  brief: "..."
                                  type: Argument
                                  vector: true
                                  prefix: {value: "(", force: true}
                                  suffix: {value: ") ", force: true}
                                  separator: ", "
                                  getter: {override: true}
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                        - KineticBlock:
                            brief: ".."
                            nmodl: "KINETIC "
                            members:
                              - name:
                                  brief: "..."
                                  type: Name
                                  node_name: true
                                  suffix: {value: " "}
                              - solvefor:
                                  brief: "..."
                                  type: Name
                                  vector: true
                                  separator: ","
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                        - MatchBlock:
                            brief: ".."
                            nmodl: MATCH
                            members:
                              - matchs:
                                  brief: "..."
                                  type: Match
                                  vector: true
                                  separator: " "
                                  prefix: {value: " { "}
                                  suffix: {value: " }"}
                        - UnitBlock:
                            brief: ".."
                            nmodl: "UNITS "
                            members:
                              - definitions:
                                  brief: "..."
                                  type: Expression
                                  vector: true
                        - ConstantBlock:
                            brief: ".."
                            nmodl: "CONSTANT "
                            members:
                              - statements:
                                  brief: "..."
                                  type: ConstantStatement
                                  vector: true
                        - NeuronBlock:
                            brief: "Represent `NEURON` block in the mod file"
                            description: |
                                            The keyword `NEURON` introduces a special block which contains statements
                                            that tell NMODL how to organize the variables for access at the NEURON user
                                            level. Here is an example of `NEURON` block from `HH` channel:

                                            \code{.mod}
                                                NEURON {
                                                        SUFFIX hh
                                                        USEION na READ ena WRITE ina
                                                        USEION k READ ek WRITE ik
                                                        NONSPECIFIC_CURRENT il
                                                        RANGE gnabar, gkbar, gl, el, gna, gk
                                                        RANGE minf, hinf, ninf, mtau, htau, ntau
                                                        THREADSAFE
                                                }
                                            \endcode

                            url: "https://www.neuron.yale.edu/neuron/static/py_doc/modelspec/programmatic/mechanisms/nmodl2.html#neuron"
                            nmodl: "NEURON "
                            members:
                              - statement_block:
                                  brief: "block with statements vector"
                                  type: StatementBlock
                                  getter: {override: true}
                  - Unit:
                      brief: ".."
                      members:
                        - name:
                            brief: "..."
                            type: String
                            node_name: true
                            prefix: {value: "("}
                            suffix: {value: ")"}
                  - DoubleUnit:
                      brief: ".."
                      members:
                        - value:
                            brief: "..."
                            type: Double
                        - unit:
                            brief: "..."
                            type: Unit
                            optional: true
                  - LocalVar:
                      brief: ".."
                      members:
                        - name:
                            brief: "..."
                            type: Identifier
                            node_name: true
                  - Limits:
                      brief: ".."
                      members:
                        - min:
                            brief: "..."
                            type: Double
                            prefix: {value: "<"}
                            suffix: {value: ","}
                        - max:
                            brief: "..."
                            type: Double
                            suffix: {value: ">"}
                  - NumberRange:
                      brief: ".."
                      members:
                        - min:
                            brief: "..."
                            type: Number
                            prefix: {value: "<"}
                            suffix: {value: ","}
                        - max:
                            brief: "..."
                            type: Number
                            suffix: {value: ">"}
                  - PlotVar:
                      brief: ".."
                      members:
                        - name:
                            brief: "..."
                            type: Identifier
                        - index:
                            brief: "..."
                            type: Integer
                            optional: true
                            prefix: {value: "["}
                            suffix: {value: "]"}
                  - ConstantVar:
                      brief: ".."
                      members:
                        - name:
                            brief: "..."
                            type: Name
                            node_name: true
                        - value:
                            brief: "..."
                            type: Number
                            prefix: {value: " = "}
                        - unit:
                            brief: "..."
                            type: Unit
                            optional: true
                            prefix: {value: " "}
                  - BinaryOperator:
                      brief: ".."
                      members:
                        - value:
                            brief: "..."
                            type: BinaryOp
                  - UnaryOperator:
                      brief: ".."
                      members:
                        - value:
                            brief: "..."
                            type: UnaryOp
                  - ReactionOperator:
                      brief: ".."
                      members:
                        - value:
                            brief: "..."
                            type: ReactionOp
                  - ParenExpression:
                      brief: ".."
                      members:
                        - expression:
                            brief: "..."
                            type: Expression
                            prefix: {value: "("}
                            suffix: {value: ")"}
                  - BinaryExpression:
                      brief: ".."
                      members:
                        - lhs:
                            brief: "..."
                            type: Expression
                            public: true
                        - op:
                            brief: "..."
                            type: BinaryOperator
                            public: true
                        - rhs:
                            brief: "..."
                            type: Expression
                            public: true
                  - DiffEqExpression:
                      brief: "Represents differential equation in DERIVATIVE block"
                      members:
                        - expression:
                            brief: "Differential Expression"
                            type: BinaryExpression
                            public: true
                  - UnaryExpression:
                      brief: ".."
                      members:
                        - op:
                            brief: "..."
                            type: UnaryOperator
                        - expression:
                            brief: "..."
                            type: Expression
                  - NonLinEquation:
                      brief: ".."
                      nmodl: "~ "
                      members:
                        - lhs:
                            brief: "..."
                            type: Expression
                            suffix: {value: " = "}
                        - rhs:
                            brief: "..."
                            type: Expression
                  - LinEquation:
                      brief: ".."
                      nmodl: "~ "
                      members:
                        - left_linxpression:
                            brief: "..."
                            type: Expression
                            suffix: {value: " = "}
                        - linxpression:
                            brief: "..."
                            type: Expression
                  - FunctionCall:
                      brief: ".."
                      members:
                        - name:
                            brief: "..."
                            type: Name
                            node_name: true
                        - arguments:
                            brief: "..."
                            type: Expression
                            vector: true
                            separator: ", "
                            prefix: {value: "(", force: true}
                            suffix: {value: ")", force: true}
                  - FirstLastTypeIndex:
                      brief: ".."
                      members:
                        - value:
                            brief: "..."
                            type: FirstLastType
                  - Watch:
                      brief: ".."
                      members:
                        - expression:
                            brief: "..."
                            type: Expression
                            prefix: {value: "("}
                            suffix: {value: ")"}
                        - value:
                            brief: "..."
                            type: Expression
                            prefix: {value: " "}
                  - QueueExpressionType:
                      brief: ".."
                      members:
                        - value:
                            brief: "..."
                            type: QueueType
                  - Match:
                      brief: ".."
                      members:
                        - name:
                            brief: "..."
                            type: Identifier
                        - expression:
                            brief: "..."
                            type: Expression
                            optional: true
                  - BABlockType:
                      brief: ".."
                      members:
                        - value:
                            brief: "..."
                            type: BAType
                  - UnitDef:
                      brief: ".."
                      members:
                        - unit1:
                            brief: "..."
                            type: Unit
                            node_name: true
                        - unit2:
                            brief: "..."
                            type: Unit
                            prefix: {value: " = "}
                  - FactorDef:
                      brief: ".."
                      members:
                        - name:
                            brief: "..."
                            type: Name
                            node_name: true
                            suffix: {value: " ="}
                        - value:
                            brief: "..."
                            type: Double
                            optional: true
                            prefix: {value: " "}
                        - unit1:
                            brief: "..."
                            type: Unit
                            prefix: {value: " "}
                        - gt:
                            brief: "Todo: Michael : rename variable gt as well"
                            type: Boolean
                            nmodl: " ->"
                            optional: true
                        - unit2:
                            brief: "..."
                            type: Unit
                            optional: true
                            prefix: {value: " "}
                  - Valence:
                      brief: ".."
                      members:
                        - type:
                            type: Name
                            brief: "..."
                            prefix: {value: " "}
                            suffix: {value: " "}
                        - value:
                            brief: "..."
                            type: Double

            - Statement:
                brief: ".."
                children:
                  - UnitState:
                      brief: ".."
                      members:
                        - value:
                            brief: "..."
                            type: UnitStateType
                  - LocalListStatement:
                      brief: ".."
                      nmodl: "LOCAL "
                      members:
                        - variables:
                            brief: "..."
                            type: LocalVar
                            vector: true
                            separator: ", "
                            public: true
                  - Model:
                      brief: ".."
                      nmodl: TITLE
                      members:
                        - title:
                            brief: "..."
                            type: String
                  - Define:
                      brief: ".."
                      nmodl: "DEFINE "
                      members:
                        - name:
                            brief: "..."
                            type: Name
                            node_name: true
                        - value:
                            brief: "..."
                            type: Integer
                            prefix: {value: " "}
                  - Include:
                      brief: ".."
                      nmodl: "INCLUDE "
                      members:
                        - filename:
                            brief: "..."
                            type: String
                  - ParamAssign:
                      brief: ".."
                      members:
                        - name:
                            brief: "..."
                            type: Identifier
                            node_name: true
                        - value:
                            brief: "..."
                            type: Number
                            optional: true
                            prefix: {value: " = "}
                        - unit:
                            brief: "..."
                            type: Unit
                            optional: true
                            prefix: {value: " "}
                        - limit:
                            brief: "..."
                            type: Limits
                            optional: true
                            prefix: {value: " "}
                  - Stepped:
                      brief: ".."
                      members:
                        - name:
                            brief: "..."
                            type: Name
                        - values:
                            brief: "..."
                            type: Number
                            vector: true
                            prefix: {value: " = "}
                            separator: ", "
                        - unit:
                            brief: "..."
                            type: Unit
                            optional: true
                            prefix: {value: " "}
                  - IndependentDef:
                      brief: ".."
                      members:
                        - sweep:
                            brief: "..."
                            type: Boolean
                            optional: true
                            nmodl: "SWEEP "
                        - name:
                            brief: "..."
                            type: Name
                        - from:
                            brief: "..."
                            type: Number
                            prefix: {value: " FROM "}
                        - to:
                            brief: "..."
                            type: Number
                            prefix: {value: " TO "}
                        - with:
                            brief: "..."
                            type: Integer
                            prefix: {value: " WITH "}
                        - start:
                            brief: "..."
                            type: Number
                            prefix: {value: " START "}
                            optional: true
                        - unit:
                            brief: "..."
                            type: Unit
                            optional: true
                            prefix: {value: " "}
                  - DependentDef:
                      brief: ".."
                      members:
                        - name:
                            brief: "..."
                            type: Identifier
                            node_name: true
                        - length:
                            brief: "..."
                            type: Integer
                            optional: true
                            prefix: {value: "["}
                            suffix: {value: "]"}
                        - from:
                            brief: "..."
                            type: Number
                            prefix: {value: " FROM "}
                            optional: true
                        - to:
                            brief: "..."
                            type: Number
                            prefix: {value: " TO "}
                            optional: true
                        - start:
                            brief: "..."
                            type: Number
                            prefix: {value: " START "}
                            optional: true
                        - unit:
                            brief: "..."
                            type: Unit
                            optional: true
                            prefix: {value: " "}
                        - abstol:
                            brief: "..."
                            type: Double
                            prefix: {value: " <"}
                            suffix: {value: ">"}
                            optional: true
                  - PlotDeclaration:
                      brief: ".."
                      nmodl: "PLOT "
                      members:
                        - variables:
                            brief: "..."
                            type: PlotVar
                            vector: true
                            separator: ", "
                        - name:
                            brief: "..."
                            type: PlotVar
                            prefix: {value: " VS "}
                  - ConductanceHint:
                      brief: ".."
                      nmodl: "CONDUCTANCE "
                      members:
                        - conductance:
                            brief: "..."
                            type: Name
                        - ion:
                            brief: "..."
                            type: Name
                            optional: true
                            prefix: {value: " USEION "}
                  - ExpressionStatement:
                      brief: ".."
                      members:
                        - expression:
                            brief: "..."
                            type: Expression
                  - ProtectStatement:
                      brief: ".."
                      nmodl: "PROTECT "
                      members:
                        - expression:
                            brief: "..."
                            type: Expression
                  - FromStatement:
                      brief: ".."
                      nmodl: "FROM "
                      members:
                        - name:
                            brief: "..."
                            type: Name
                            node_name: true
                        - from:
                            brief: "..."
                            type: Expression
                            prefix: {value: " = "}
                        - to:
                            brief: "..."
                            type: Expression
                            prefix: {value: " TO "}
                        - increment:
                            brief: "..."
                            type: Expression
                            prefix: {value: " BY "}
                            suffix: {value: " ", force: true}
                            optional: true
                        - statement_block:
                            brief: "..."
                            type: StatementBlock
                            getter: {override: true}
                  - ForAllStatement:
                      brief: ".."
                      nmodl: "FORALL "
                      members:
                        - name:
                            brief: "..."
                            type: Name
                            suffix: {value: " "}
                        - statement_block:
                            brief: "..."
                            type: StatementBlock
                            getter: {override: true}
                  - WhileStatement:
                      brief: ".."
                      nmodl: "WHILE "
                      members:
                        - condition:
                            brief: "..."
                            type: Expression
                            prefix: {value: "("}
                            suffix: {value: ") "}
                        - statement_block:
                            brief: "..."
                            type: StatementBlock
                            getter: {override: true}
                  - IfStatement:
                      brief: ".."
                      nmodl: "IF "
                      members:
                        - condition:
                            brief: "..."
                            type: Expression
                            prefix: {value: "("}
                            suffix: {value: ") "}
                        - statement_block:
                            brief: "..."
                            type: StatementBlock
                            getter: {override: true}
                        - elseifs:
                            brief: "..."
                            type: ElseIfStatement
                            vector: true
                        - elses:
                            brief: "..."
                            type: ElseStatement
                            optional: true
                  - ElseIfStatement:
                      brief: ".."
                      nmodl: " ELSE IF "
                      members:
                        - condition:
                            brief: "..."
                            type: Expression
                            prefix: {value: "("}
                            suffix: {value: ") "}
                        - statement_block:
                            brief: "..."
                            type: StatementBlock
                            getter: {override: true}
                  - ElseStatement:
                      brief: ".."
                      nmodl: " ELSE "
                      members:
                        - statement_block:
                            brief: "..."
                            type: StatementBlock
                            getter: {override: true}
                  - PartialEquation:
                      brief: ".."
                      members:
                        - prime:
                            brief: "..."
                            type: PrimeName
                        - name1:
                            brief: "..."
                            type: Name
                        - name2:
                            brief: "..."
                            type: Name
                        - name3:
                            brief: "..."
                            type: Name
                  - PartialBoundary:
                      brief: ".."
                      nmodl: "~ "
                      members:
                        - del:
                            brief: "..."
                            type: Name
                            optional: true
                            suffix: {value: " "}
                        - name:
                            brief: "..."
                            type: Identifier
                        - index:
                            brief: "..."
                            type: FirstLastTypeIndex
                            optional: true
                            prefix: {value: "["}
                            suffix: {value: "]"}
                        - expression:
                            brief: "..."
                            type: Expression
                            optional: true
                            prefix: {value: " = "}
                        - name1:
                            brief: "..."
                            type: Name
                            optional: true
                            prefix: {value: " = "}
                            suffix: {value: "*"}
                        - del2:
                            brief: "..."
                            type: Name
                            optional: true
                            suffix: {value: "("}
                        - name2:
                            brief: "..."
                            type: Name
                            optional: true
                            suffix: {value: ")"}
                        - name3:
                            brief: "..."
                            type: Name
                            optional: true
                            prefix: {value: "+"}
                  - WatchStatement:
                      brief: ".."
                      nmodl: "WATCH "
                      members:
                        - statements:
                            brief: "..."
                            type: Watch
                            vector: true
                            separator: ","
                            add: true
                  - MutexLock:
                      brief: ".."
                      nmodl: MUTEXLOCK
                  - MutexUnlock:
                      brief: ".."
                      nmodl: MUTEXUNLOCK
                  - Reset:
                      brief: ".."
                      nmodl: RESET
                  - Sens:
                      brief: ".."
                      nmodl: "SENS "
                      members:
                        - variables:
                            brief: "..."
                            type: VarName
                            vector: true
                            separator: ", "
                  - Conserve:
                      brief: ".."
                      nmodl: CONSERVE
                      members:
                        - react:
                            brief: "..."
                            type: Expression
                            prefix: {value: " "}
                        - expr:
                            brief: "..."
                            type: Expression
                            prefix: {value: " = "}
                  - Compartment:
                      brief: ".."
                      nmodl: COMPARTMENT
                      members:
                        - name:
                            brief: "..."
                            type: Name
                            optional: true
                            prefix: {value: " "}
                            suffix: {value: ","}
                        - expression:
                            brief: "..."
                            type: Expression
                            prefix: {value: " "}
                        - names:
                            brief: "..."
                            type: Name
                            vector: true
                            prefix: {value: " {"}
                            suffix: {value: "}"}
                            separator: " "
                  - LonDifuse:
                      brief: ".."
                      nmodl: LONGITUDINAL_DIFFUSION
                      members:
                        - name:
                            brief: "..."
                            type: Name
                            optional: true
                            prefix: {value: " "}
                            suffix: {value: ","}
                        - expression:
                            brief: "..."
                            type: Expression
                            prefix: {value: " "}
                        - names:
                            brief: "..."
                            type: Name
                            vector: true
                            prefix: {value: " {"}
                            suffix: {value: "}"}
                            separator: " "
                  - ReactionStatement:
                      brief: ".."
                      nmodl: "~ "
                      members:
                        - reaction1:
                            brief: "..."
                            type: Expression
                        - op:
                            brief: "..."
                            type: ReactionOperator
                            prefix: {value: " "}
                        - reaction2:
                            brief: "..."
                            type: Expression
                            prefix: {value: " "}
                            optional: true
                        - expression1:
                            brief: "..."
                            type: Expression
                            prefix: {value: " ("}
                        - expression2:
                            brief: "..."
                            type: Expression
                            prefix: {value: ", "}
                            suffix: {value: ")", force: true}
                            optional: true
                  - LagStatement:
                      brief: ".."
                      nmodl: "LAG "
                      members:
                        - name:
                            brief: "..."
                            type: Identifier
                        - byname:
                            brief: "..."
                            type: Name
                            prefix: {value: " BY "}
                  - QueueStatement:
                      brief: ".."
                      members:
                        - qtype:
                            brief: "..."
                            type: QueueExpressionType
                        - name:
                            brief: "..."
                            type: Identifier
                            prefix: {value: " "}
                  - ConstantStatement:
                      brief: ".."
                      members:
                        - constant:
                            brief: "..."
                            type: ConstantVar
                  - TableStatement:
                      brief: ".."
                      nmodl: "TABLE "
                      members:
                        - table_vars:
                            brief: "..."
                            type: Name
                            vector: true
                            separator: ","
                        - depend_vars:
                            brief: "..."
                            type: Name
                            vector: true
                            prefix: {value: " DEPEND "}
                            separator: ","
                        - from:
                            brief: "..."
                            type: Expression
                            prefix: {value: " FROM "}
                        - to:
                            brief: "..."
                            type: Expression
                            prefix: {value: " TO "}
                        - with:
                            brief: "..."
                            type: Integer
                            prefix: {value: " WITH "}
                  - Suffix:
                      brief: ".."
                      members:
                        - type:
                            brief: "..."
                            type: Name
                            suffix: {value: " "}
                        - name:
                            brief: "..."
                            type: Name
                            node_name: true
                  - Useion:
                      brief: ".."
                      nmodl: "USEION "
                      members:
                        - name:
                            brief: "..."
                            type: Name
                            node_name: true
                        - readlist:
                            brief: "..."
                            type: ReadIonVar
                            vector: true
                            prefix: {value: " READ "}
                            separator: ", "
                        - writelist:
                            brief: "..."
                            type: WriteIonVar
                            vector: true
                            prefix: {value: " WRITE "}
                            separator: ", "
                        - valence:
                            brief: "..."
                            type: Valence
                            optional: true
                  - Nonspecific:
                      brief: ".."
                      nmodl: "NONSPECIFIC_CURRENT "
                      members:
                        - currents:
                            brief: "..."
                            type: NonspecificCurVar
                            vector: true
                            separator: ", "
                  - ElctrodeCurrent:
                      brief: ".."
                      nmodl: "ELECTRODE_CURRENT "
                      members:
                        - currents:
                            brief: "..."
                            type: ElectrodeCurVar
                            vector: true
                            separator: ", "
                  - Section:
                      brief: ".."
                      nmodl: "SECTION "
                      members:
                        - sections:
                            brief: "..."
                            type: SectionVar
                            vector: true
                            separator: ", "
                  - Range:
                      brief: ".."
                      nmodl: "RANGE "
                      members:
                        - variables:
                            brief: "..."
                            type: RangeVar
                            vector: true
                            separator: ", "
                  - Global:
                      brief: ".."
                      nmodl: "GLOBAL "
                      members:
                        - variables:
                            brief: "..."
                            type: GlobalVar
                            vector: true
                            separator: ", "
                  - Pointer:
                      brief: ".."
                      nmodl: "POINTER "
                      members:
                        - variables:
                            brief: "..."
                            type: PointerVar
                            vector: true
                            separator: ", "
                  - BbcorePtr:
                      brief: ".."
                      nmodl: "BBCOREPOINTER "
                      members:
                        - variables:
                            brief: "..."
                            type: BbcorePointerVar
                            vector: true
                            separator: ", "
                  - External:
                      brief: ".."
                      nmodl: "EXTERNAL "
                      members:
                        - variables:
                            brief: "..."
                            type: ExternVar
                            vector: true
                            separator: ", "
                  - ThreadSafe:
                      brief: ".."
                      nmodl: THREADSAFE
                      members:
                        - variables:
                            brief: "..."
                            type: ThreadsafeVar
                            vector: true
                            separator: ", "
                            prefix: {value: " "}
                  - Verbatim:
                      brief: "Represents a C code block"
                      nmodl: VERBATIM
                      members:
                        - statement:
                            brief: "C code as a string"
                            type: String
                            suffix: {value: "ENDVERBATIM"}
                  - LineComment:
                      brief: "Represents a one line comment in NMODL"
                      members:
                        - statement:
                            brief: "comment text"
                            type: String
                  - BlockComment:
                      brief: "Represents a multi-line comment in NMODL"
                      nmodl: COMMENT
                      members:
                        - statement:
                            brief: "comment text"
                            type: String
                            suffix: {value: "ENDCOMMENT"}

- Program:
    brief: "Represents top level AST node for whole NMODL input"
    members:
      - blocks:
          brief: "..."
          type: Node
          vector: true
          add: true
          public: true
