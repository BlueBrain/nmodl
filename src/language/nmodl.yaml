######################### NMODL Abstract Language Definition ##############################
#
# PURPOSE
# =======
#
# Lot of information about language constructs is necessary at various stages
# like AST definitions, visitors implementation, source-to-source transformations
# etc. In case of small changes in grammar or AST definition, especially
# during development stage, we have to re-write considerable part of the code.
# The idea of "abstract" language definition is to define framework that can automatically
# generate part of this "mechanical" code. This approach has been used in some open source
# projects (e.g. compiler design courses, TableGen format in LLVM).
#
# During first prototyping phase we defined simple text rules inspired by compiler course
# assignment available at jazariethach/project6_CS160.git (no longer available on github).
#
# The basic format of the every construct specification was:
#
#       BaseType:ChildType => MemberType<member_name>
#
# Here "ChildType" is a new AST class that we are defining. "ParentType" is the base class,
# "MemberType" is the type of member variable with variable name "member_name". The name is
# specified in the angle braces "< >". This will generate C++ class definition like :
#
#       class ChildType : public BaseType {
#         private:
#           MemberType member_name;
#       };
#
# This specification format was sufficient for first AST design but as we started
# implementing more features and compiler passes, we need to add more information to language
# definition. For example, we need to make certain members vector, some are optional, some need
# specific method (getter/setter) etc. In the future we may need to make certain members private.
# Above text definition is limiting if we have to accomodate future enhancements.
#
# To overcome above limitation, we are moving to YAML definition format. This allows easy
# extension to language construct. For example, new properties could be easily added to
# exisiting specification.
#
#
# NOTE
# ====
#
# Old text specification has been converted to YAML format. The old documentation has information
# about how/why specific types were choosen for AST. You can find that documentation in the older
# commits of this file (e.g. a0a20e277ccf26752af4f648c245b4e06a44af20).
#
# YAML BASED RULE SPECIFICATION
# =============================
#
# Text based specification described above is very limiting in terms adding extra properties.
# YAML based specification allows easy addition of new properties. Below are some comments
# about the properties and specification :
#
# 1.  Every key in YAML specification is AST node
# 2.  The hierarchy defines parent-child class relationship
# 3.  members is an array of member variables of the class
# 4.  optional : indicates if variable is optional in bison specification (i.e. pointer)
# 5.  type : type of the member
# 6.  vector : if member variable is std::vector type
# 7.  prefix/suffix :
#         value  : indicates the value (i.e. string here) of prefix/suffix itself
#         force  : print value always even if member if null pointer itself (e.g. arguments)
# 8.  separator : for the vector data type, the separator for prinitng elements
# 9.  node_name : add get_node_name() method to class and return corresponding value as name
# 10. add : need to have addMemberType method for corresponding variable (todo : remove this)
# 11. order of the members is important and determines how constructors/nmodl visitor get
#     defined from python code generators.
#
# TODO : Add detailed information about YAML specification by porting old text based rule
# specification

- AST:
  - Node:
    - Expression:
      - String:
          members:
            - value:
                type: std::string
      - Number:
        - Integer:
            members:
              - value:
                  type: int
              - macro_name:
                  type: Name
                  optional: true
        - Float:
            members:
              - value:
                  type: float
        - Double:
            members:
              - value:
                  type: double
        - Boolean:
            members:
              - value:
                  type: int
      - Identifier:
        - Name:
            members:
              - value:
                  type: String
                  node_name: true
        - PrimeName:
            members:
              - value:
                  type: String
                  node_name: true
              - order:
                  type: Integer
        - VarName:
            members:
              - name:
                  type: Identifier
                  node_name: true
              - at_index:
                  type: Integer
                  optional: true
                  prefix: {value: "@"}
              - index:
                  type: Expression
                  optional: true
                  prefix: {value: "["}
                  suffix: {value: "]"}
        - IndexedName:
            members:
              - name:
                  type: Identifier
                  node_name: true
              - length:
                  type: Expression
                  prefix: {value: "["}
                  suffix: {value: "]"}
        - Argument:
            members:
              - name:
                  type: Identifier
                  node_name: true
              - unit:
                  type: Unit
                  optional: true
        - ReactVarName:
            members:
              - value:
                  type: Integer
                  optional: true
                  prefix: {value: " "}
              - name:
                  type: VarName
                  node_name: true
        - ReadIonVar:
            members:
              - name:
                  type: Name
                  node_name: true
        - WriteIonVar:
            members:
              - name:
                  type: Name
                  node_name: true
        - NonspeCurVar:
            members:
              - name:
                  type: Name
                  node_name: true
        - ElectrodeCurVar:
            members:
              - name:
                  type: Name
                  node_name: true
        - SectionVar:
            members:
              - name:
                  type: Name
                  node_name: true
        - RangeVar:
            members:
              - name:
                  type: Name
                  node_name: true
        - GlobalVar:
            members:
              - name:
                  type: Name
                  node_name: true
        - PointerVar:
            members:
              - name:
                  type: Name
                  node_name: true
        - BbcorePointerVar:
            members:
              - name:
                  type: Name
                  node_name: true
        - ExternVar:
            members:
              - name:
                  type: Name
                  node_name: true
        - ThreadsafeVar:
            members:
              - name:
                  type: Name
                  node_name: true
      - Block:
        - ParamBlock:
            nmodl: "PARAMETER "
            members:
              - statements:
                  type: ParamAssign
                  vector: true
        - StepBlock:
            nmodl: "STEPPED "
            members:
              - statements:
                  type: Stepped
                  vector: true
        - IndependentBlock:
            nmodl: "INDEPENDENT "
            members:
              - definitions:
                  type: IndependentDef
                  vector: true
        - DependentBlock:
            nmodl: "ASSIGNED "
            members:
              - definitions:
                  type: DependentDef
                  vector: true
        - StateBlock:
            nmodl: "STATE "
            members:
              - definitions:
                  type: DependentDef
                  vector: true
        - PlotBlock:
            members:
              - plot:
                  type: PlotDeclaration
        - InitialBlock:
            nmodl: "INITIAL "
            members:
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - ConstructorBlock:
            nmodl: "CONSTRUCTOR "
            members:
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - DestructorBlock:
            nmodl: "DESTRUCTOR "
            members:
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - StatementBlock:
            members:
              - statements:
                  type: Statement
                  vector: true
        - DerivativeBlock:
            nmodl: "DERIVATIVE "
            members:
              - name:
                  type: Name
                  node_name: true
                  suffix: {value: " "}
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - LinearBlock:
            nmodl: "LINEAR "
            members:
              - name:
                  type: Name
                  node_name: true
                  suffix: {value: " "}
              - solvefor:
                  type: Name
                  vector: true
                  separator: ","
                  prefix: {value: " SOLVEFOR "}
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - NonLinearBlock:
            nmodl: "NONLINEAR "
            members:
              - name:
                  type: Name
                  node_name: true
              - solvefor:
                  type: Name
                  vector: true
                  separator: ","
                  prefix: {value: " SOLVEFOR "}
                  suffix: {value: " ", force: true}
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - DiscreteBlock:
            nmodl: "DISCRETE "
            members:
              - name:
                  type: Name
                  node_name: true
                  suffix: {value: " "}
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - PartialBlock:
            nmodl: "PARTIAL "
            members:
              - name:
                  type: Name
                  node_name: true
                  suffix: {value: " "}
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - FunctionTableBlock:
            nmodl: "FUNCTION_TABLE "
            members:
              - name:
                  type: Name
                  node_name: true
              - parameters:
                  type: Argument
                  vector: true
                  prefix: {value: "(", force: true}
                  suffix: {value: ")", force: true}
                  separator: ", "
                  getter: {override: true}
              - unit:
                  type: Unit
                  optional: true
                  prefix: {value: " "}
        - FunctionBlock:
            nmodl: "FUNCTION "
            members:
              - name:
                  type: Name
                  node_name: true
              - parameters:
                  type: Argument
                  vector: true
                  prefix: {value: "(", force: true}
                  suffix: {value: ")", force: true}
                  separator: ", "
                  getter: {override: true}
              - unit:
                  type: Unit
                  optional: true
                  prefix: {value: " "}
                  suffix: {value: " ", force: true}
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - ProcedureBlock:
            nmodl: "PROCEDURE "
            members:
              - name:
                  type: Name
                  node_name: true
              - parameters:
                  type: Argument
                  vector: true
                  prefix: {value: "(", force: true}
                  suffix: {value: ") ", force: true}
                  separator: ", "
                  getter: {override: true}
              - unit:
                  type: Unit
                  optional: true
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - NetReceiveBlock:
            nmodl: "NET_RECEIVE "
            members:
              - parameters:
                  type: Argument
                  vector: true
                  prefix: {value: "(", force: true}
                  suffix: {value: ") ", force: true}
                  separator: ", "
                  getter: {override: true}
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - SolveBlock:
            nmodl: SOLVE
            members:
              - block_name:
                  type: Name
                  prefix: {value: " "}
              - method:
                  type: Name
                  optional: true
                  prefix: {value: " METHOD "}
              - ifsolerr:
                  type: StatementBlock
                  optional: true
                  prefix: {value: " IFERROR "}
        - BreakpointBlock:
            nmodl: "BREAKPOINT "
            members:
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - TerminalBlock:
            nmodl: "TERMINAL "
            members:
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - BeforeBlock:
            nmodl: "BEFORE "
            members:
              - block:
                  type: BABlock
        - AfterBlock:
            nmodl: "AFTER "
            members:
              - block:
                  type: BABlock
        - BABlock:
            members:
              - type:
                  type: BABlockType
                  suffix: {value: " "}
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - ForNetcon:
            nmodl: "FOR_NETCONS "
            members:
              - parameters:
                  type: Argument
                  vector: true
                  prefix: {value: "(", force: true}
                  suffix: {value: ") ", force: true}
                  separator: ", "
                  getter: {override: true}
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - KineticBlock:
            nmodl: "KINETIC "
            members:
              - name:
                  type: Name
                  node_name: true
                  suffix: {value: " "}
              - solvefor:
                  type: Name
                  vector: true
                  separator: ","
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
        - MatchBlock:
            nmodl: MATCH
            members:
              - matchs:
                  type: Match
                  vector: true
                  separator: " "
                  prefix: {value: " { "}
                  suffix: {value: " }"}
        - UnitBlock:
            nmodl: "UNITS "
            members:
              - definitions:
                  type: Expression
                  vector: true
        - ConstantBlock:
            nmodl: "CONSTANT "
            members:
              - statements:
                  type: ConstantStatement
                  vector: true
        - NeuronBlock:
            nmodl: "NEURON "
            members:
              - statement_block:
                  type: StatementBlock
                  getter: {override: true}
      - Unit:
          members:
            - name:
                type: String
                node_name: true
                prefix: {value: "("}
                suffix: {value: ")"}
      - DoubleUnit:
          members:
            - values:
                type: Double
            - unit:
                type: Unit
                optional: true
      - LocalVar:
          members:
            - name:
                type: Identifier
                node_name: true
      - Limits:
          members:
            - min:
                type: Double
                prefix: {value: "<"}
                suffix: {value: ","}
            - max:
                type: Double
                suffix: {value: ">"}
      - NumberRange:
          members:
            - min:
                type: Number
                prefix: {value: "<"}
                suffix: {value: ","}
            - max:
                type: Number
                suffix: {value: ">"}

      - PlotVar:
          members:
            - name:
                type: Identifier
            - index:
                type: Integer
                optional: true
                prefix: {value: "["}
                suffix: {value: "]"}
      - ConstantVar:
          members:
            - name:
                type: Name
                node_name: true
            - value:
                type: Number
                prefix: {value: " = "}
            - unit:
                type: Unit
                optional: true
                prefix: {value: " "}
      - BinaryOperator:
          members:
            - value:
                type: BinaryOp
      - UnaryOperator:
          members:
            - value:
                type: UnaryOp
      - ReactionOperator:
          members:
            - value:
                type: ReactionOp
      - WrappedExpression:
          members:
            - expression:
                type: Expression
      - ParenExpression:
          members:
            - expr:
                type: Expression
                prefix: {value: "("}
                suffix: {value: ")"}
      - BinaryExpression:
          members:
            - lhs:
                type: Expression
            - op:
                type: BinaryOperator
            - rhs:
                type: Expression
      - UnaryExpression:
          members:
            - op:
                type: UnaryOperator
            - expression:
                type: Expression
      - NonLinEquation:
          nmodl: "~ "
          members:
            - lhs:
                type: Expression
                suffix: {value: " = "}
            - rhs:
                type: Expression
      - LinEquation:
          nmodl: "~ "
          members:
            - leftlinexpr:
                type: Expression
                suffix: {value: " = "}
            - linexpr:
                type: Expression
      - FunctionCall:
          members:
            - name:
                type: Name
                node_name: true
            - arguments:
                type: Expression
                vector: true
                separator: ", "
                prefix: {value: "(", force: true}
                suffix: {value: ")", force: true}
      - FirstLastTypeIndex:
          members:
            - value:
                type: FirstLastType
      - Watch:
          members:
            - expression:
                type: Expression
                prefix: {value: "("}
                suffix: {value: ")"}
            - value:
                type: Expression
                prefix: {value: " "}
      - QueueExpressionType:
          members:
            - value:
                type: QueueType
      - Match:
          members:
            - name:
                type: Identifier
            - expression:
                type: Expression
                optional: true
      - BABlockType:
          members:
            - value:
                type: BAType
      - UnitDef:
          members:
            - unit1:
                type: Unit
                node_name: true
            - unit2:
                type: Unit
                prefix: {value: " = "}
      - FactorDef:
          members:
            - name:
                type: Name
                node_name: true
                suffix: {value: " ="}
            - value:
                type: Double
                optional: true
                prefix: {value: " "}
            - unit1:
                type: Unit
                prefix: {value: " "}
            - gt:
                type: Boolean
                nmodl: " ->"
                optional: true
            - unit2:
                type: Unit
                optional: true
                prefix: {value: " "}
      - Valence:
          members:
            - type:
                type: Name
                prefix: {value: " "}
                suffix: {value: " "}
            - value:
                type: Double

    - Statement:
      - UnitState:
          members:
            - value:
                type: UnitStateType
      - LocalListStatement:
          nmodl: "LOCAL "
          members:
            - variables:
                type: LocalVar
                vector: true
                separator: ", "
      - Model:
          nmodl: TITLE
          members:
            - title:
                type: String
      - Define:
          nmodl: "DEFINE "
          members:
            - name:
                type: Name
            - value:
                type: Integer
                prefix: {value: " "}
      - Include:
          nmodl: "INCLUDE "
          members:
            - filename:
                type: String
      - ParamAssign:
          members:
            - name:
                type: Identifier
                node_name: true
            - value:
                type: Number
                optional: true
                prefix: {value: " = "}
            - unit:
                type: Unit
                optional: true
                prefix: {value: " "}
            - limit:
                type: Limits
                optional: true
                prefix: {value: " "}
      - Stepped:
          members:
            - name:
                type: Name
            - values:
                type: Number
                vector: true
                prefix: {value: " = "}
                separator: ", "
            - unit:
                type: Unit
                optional: true
                prefix: {value: " "}
      - IndependentDef:
          members:
            - sweep:
                type: Boolean
                optional: true
                nmodl: "SWEEP "
            - name:
                type: Name
            - from:
                type: Number
                prefix: {value: " FROM "}
            - to:
                type: Number
                prefix: {value: " TO "}
            - with:
                type: Integer
                prefix: {value: " WITH "}
            - opstart:
                type: Number
                prefix: {value: " START "}
                optional: true
            - unit:
                type: Unit
                optional: true
                prefix: {value: " "}
      - DependentDef:
          members:
            - name:
                type: Identifier
                node_name: true
            - length:
                type: Integer
                optional: true
                prefix: {value: "["}
                suffix: {value: "]"}
            - from:
                type: Number
                prefix: {value: " FROM "}
                optional: true
            - to:
                type: Number
                prefix: {value: " TO "}
                optional: true
            - opstart:
                type: Number
                prefix: {value: " START "}
                optional: true
            - unit:
                type: Unit
                optional: true
                prefix: {value: " "}
            - abstol:
                type: Double
                prefix: {value: " <"}
                suffix: {value: ">"}
                optional: true
      - PlotDeclaration:
          nmodl: "PLOT "
          members:
            - pvlist:
                type: PlotVar
                vector: true
                separator: ", "
            - name:
                type: PlotVar
                prefix: {value: " VS "}
      - ConductanceHint:
          nmodl: "CONDUCTANCE "
          members:
            - conductance:
                type: Name
            - ion:
                type: Name
                optional: true
                prefix: {value: " USEION "}
      - ExpressionStatement:
          members:
            - expression:
                type: Expression
      - ProtectStatement:
          nmodl: "PROTECT "
          members:
            - expression:
                type: Expression
      - FromStatement:
          nmodl: "FROM "
          members:
            - name:
                type: Name
                node_name: true
            - from:
                type: Expression
                prefix: {value: " = "}
            - to:
                type: Expression
                prefix: {value: " TO "}
            - opinc:
                type: Expression
                prefix: {value: " BY "}
                suffix: {value: " ", force: true}
                optional: true
            - statement_block:
                type: StatementBlock
                getter: {override: true}
      - ForAllStatement:
          nmodl: "FORALL "
          members:
            - name:
                type: Name
                suffix: {value: " "}
            - statement_block:
                type: StatementBlock
                getter: {override: true}
      - WhileStatement:
          nmodl: "WHILE "
          members:
            - condition:
                type: Expression
                prefix: {value: "("}
                suffix: {value: ") "}
            - statement_block:
                type: StatementBlock
                getter: {override: true}
      - IfStatement:
          nmodl: "IF "
          members:
            - condition:
                type: Expression
                prefix: {value: "("}
                suffix: {value: ") "}
            - statement_block:
                type: StatementBlock
                getter: {override: true}
            - elseifs:
                type: ElseIfStatement
                vector: true
            - elses:
                type: ElseStatement
                optional: true
      - ElseIfStatement:
          nmodl: " ELSE IF "
          members:
            - condition:
                type: Expression
                prefix: {value: "("}
                suffix: {value: ") "}
            - statement_block:
                type: StatementBlock
                getter: {override: true}
      - ElseStatement:
          nmodl: " ELSE "
          members:
            - statement_block:
                type: StatementBlock
                getter: {override: true}
      - PartialEquation:
          members:
            - prime:
                type: PrimeName
            - name1:
                type: Name
            - name2:
                type: Name
            - name3:
                type: Name
      - PartialBoundary:
          nmodl: "~ "
          members:
            - del:
                type: Name
                optional: true
                suffix: {value: " "}
            - name:
                type: Identifier
            - index:
                type: FirstLastTypeIndex
                optional: true
                prefix: {value: "["}
                suffix: {value: "]"}
            - expression:
                type: Expression
                optional: true
                prefix: {value: " = "}
            - name1:
                type: Name
                optional: true
                prefix: {value: " = "}
                suffix: {value: "*"}
            - del2:
                type: Name
                optional: true
                suffix: {value: "("}
            - name2:
                type: Name
                optional: true
                suffix: {value: ")"}
            - name3:
                type: Name
                optional: true
                prefix: {value: "+"}
      - WatchStatement:
          nmodl: "WATCH "
          members:
            - statements:
                type: Watch
                vector: true
                separator: ","
                add: true
      - MutexLock:
          nmodl: MUTEXLOCK
      - MutexUnlock:
          nmodl: MUTEXUNLOCK
      - Reset:
          nmodl: RESET
      - Sens:
          nmodl: "SENS "
          members:
            - senslist:
                type: VarName
                vector: true
                separator: ", "
      - Conserve:
          nmodl: CONSERVE
          members:
            - react:
                type: Expression
                prefix: {value: " "}
            - expr:
                type: Expression
                prefix: {value: " = "}
      - Compartment:
          nmodl: COMPARTMENT
          members:
            - name:
                type: Name
                optional: true
                prefix: {value: " "}
                suffix: {value: ","}
            - expression:
                type: Expression
                prefix: {value: " "}
            - names:
                type: Name
                vector: true
                prefix: {value: " {"}
                suffix: {value: "}"}
                separator: " "
      - LonDifuse:
          nmodl: LONGITUDINAL_DIFFUSION
          members:
            - name:
                type: Name
                optional: true
                prefix: {value: " "}
                suffix: {value: ","}
            - expression:
                type: Expression
                prefix: {value: " "}
            - names:
                type: Name
                vector: true
                prefix: {value: " {"}
                suffix: {value: "}"}
                separator: " "
      - ReactionStatement:
          nmodl: "~ "
          members:
            - react1:
                type: Expression
            - op:
                type: ReactionOperator
                prefix: {value: " "}
            - react2:
                type: Expression
                prefix: {value: " "}
                optional: true
            - expr1:
                type: Expression
                prefix: {value: " ("}
            - expr2:
                type: Expression
                prefix: {value: ", "}
                suffix: {value: ")", force: true}
                optional: true
      - LagStatement:
          nmodl: "LAG "
          members:
            - name:
                type: Identifier
            - byname:
                type: Name
                prefix: {value: " BY "}
      - QueueStatement:
          members:
            - qype:
                type: QueueExpressionType
            - name:
                type: Identifier
                prefix: {value: " "}
      - ConstantStatement:
          members:
            - constant:
                type: ConstantVar
      - TableStatement:
          nmodl: "TABLE "
          members:
            - table_vars:
                type: Name
                vector: true
                separator: ","
            - depend_vars:
                type: Name
                vector: true
                prefix: {value: " DEPEND "}
                separator: ","
            - from:
                type: Expression
                prefix: {value: " FROM "}
            - to:
                type: Expression
                prefix: {value: " TO "}
            - with:
                type: Integer
                prefix: {value: " WITH "}
      - Suffix:
          members:
            - type:
                type: Name
                suffix: {value: " "}
            - name:
                type: Name
                node_name: true
      - Useion:
          nmodl: "USEION "
          members:
            - name:
                type: Name
                node_name: true
            - readlist:
                type: ReadIonVar
                vector: true
                prefix: {value: " READ "}
                separator: ", "
            - writelist:
                type: WriteIonVar
                vector: true
                prefix: {value: " WRITE "}
                separator: ", "
            - valence:
                type: Valence
                optional: true
      - Nonspecific:
          nmodl: "NONSPECIFIC_CURRENT "
          members:
            - currents:
                type: NonspeCurVar
                vector: true
                separator: ", "
      - ElctrodeCurrent:
          nmodl: "ELECTRODE_CURRENT "
          members:
            - ecurrents:
                type: ElectrodeCurVar
                vector: true
                separator: ", "
      - Section:
          nmodl: "SECTION "
          members:
            - sections:
                type: SectionVar
                vector: true
                separator: ", "
      - Range:
          nmodl: "RANGE "
          members:
            - range_vars:
                type: RangeVar
                vector: true
                separator: ", "
      - Global:
          nmodl: "GLOBAL "
          members:
            - global_vars:
                type: GlobalVar
                vector: true
                separator: ", "
      - Pointer:
          nmodl: "POINTER "
          members:
            - pointers:
                type: PointerVar
                vector: true
                separator: ", "
      - BbcorePtr:
          nmodl: "BBCOREPOINTER "
          members:
            - bbcore_pointers:
                type: BbcorePointerVar
                vector: true
                separator: ", "
      - External:
          nmodl: "EXTERNAL "
          members:
            - externals:
                type: ExternVar
                vector: true
                separator: ", "
      - ThreadSafe:
          nmodl: THREADSAFE
          members:
            - threadsafe:
                type: ThreadsafeVar
                vector: true
                separator: ", "
                prefix: {value: " "}
      - Verbatim:
          nmodl: VERBATIM
          members:
            - statement:
                type: String
                suffix: {value: "ENDVERBATIM"}
      - Comment:
          members:
            - block_comment:
                type: String
                prefix: {value: "COMMENT"}
                suffix: {value: "ENDCOMMENT"}
                optional: true
            - line_comment:
                type: String
                optional: true

- Program:
    members:
    - blocks:
        type: Node
        vector: true
        add: true
