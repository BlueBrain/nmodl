/*************************************************************************
 * Copyright (C) 2018-2019 Blue Brain Project
 *
 * This file is part of NMODL distributed under the terms of the GNU
 * Lesser General Public License. See top-level LICENSE file for details.
 *************************************************************************/

#pragma once

#include "parser/unit/unit_parser.hpp"

/** Flex expects the declaration of yylex to be defined in the macro YY_DECL
 * and Unit parser class expects it to be declared. */
#ifndef YY_DECL
#define YY_DECL nmodl::parser::UnitParser::symbol_type nmodl::parser::UnitLexer::next_token()
#endif

/** For creating multiple (different) lexer classes, we can use '-P' flag
 * (or prefix option) to rename each yyFlexLexer to some other name like
 * ‘xxFlexLexer’. And then include <FlexLexer.h> in other sources once per
 * lexer class, first renaming yyFlexLexer as shown below. */
#ifndef __FLEX_LEXER_H
#define yyFlexLexer UnitFlexLexer
#include "FlexLexer.h"
#endif

namespace nmodl {
namespace parser {

/**
 * \class UnitLexer
 * \brief Represent Lexer/Scanner class for Units parsing
 *
 * Lexer defined to add some extra function to the scanner class from flex.
 * Flex itself creates yyFlexLexer class, which we renamed using macros to
 * UnitFlexLexer. But we change the context of the generated yylex() function
 * because the yylex() defined in UnitFlexLexer has no parameters.*/
class UnitLexer: public UnitFlexLexer {
  public:
    /** Reference to driver object which contains this lexer instance. This is
     * used for error reporting and checking macro definitions. */
    UnitDriver& driver;

    /// For tracking location of the tokens
    location loc;

    /** The streams in and out default to cin and cout, but that assignment
     * is only made when initializing in yylex(). */
    explicit UnitLexer(UnitDriver& drv, std::istream* in = nullptr, std::ostream* out = nullptr)
        : UnitFlexLexer(in, out)
        , driver(drv) {}

    ~UnitLexer() override = default;

    /** Main lexing function generated by flex according to the macro declaration
     * YY_DECL above. The generated bison parser then calls this virtual function
     * to fetch new tokens. Note that yylex() has different declaration and hence
     * it can't be used for new lexer. */
    virtual UnitParser::symbol_type next_token();

    /// consume comment
    std::string input_comment();
};

}  // namespace parser
}  // namespace nmodl