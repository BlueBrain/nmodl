name: NMODL CI

concurrency:
  group: ${{ github.workflow }}#${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: 
      - master
      - release/**
  pull_request:
    branches:
      - master
      - release/**

env:
  BUILD_TYPE: Release
  DEVELOPER_DIR: /Applications/Xcode_11.3.1.app/Contents/Developer
  DEFAULT_PY_VERSION: 3.8
  DESIRED_CMAKE_VERSION: 3.15.0

jobs:
  ci:
    runs-on: ${{ matrix.os }}

    name: ${{ matrix.os }}

    env:
      INSTALL_DIR: install
      SDK_ROOT: $(xcrun --sdk macosx --show-sdk-path)

    strategy:
      matrix:
        os: [ ubuntu-18.04, macOS-10.15 ]
      fail-fast: true

    steps:

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.4
        with:
          cmake-version: ${{ env.DESIRED_CMAKE_VERSION }}
          
      - name: Install homebrew packages
        if: startsWith(matrix.os, 'macOS')
        run: |
          brew install coreutils bison flex boost openmpi
        shell: bash

      - name: Install apt packages
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get install flex bison dvipng libfl-dev python3-dev python3-pip
        shell: bash

      - name: Set up Python3
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
        env:
          PYTHON_VERSION:  ${{ env.DEFAULT_PY_VERSION }}
       
      - name: Install Python3 dependencies
        run: |
          pip3 install -U pip setuptools scikit-build Jinja2 PyYAML pytest 'sympy>=1.3'
          
      - uses: actions/checkout@v2
        
      - name: Build and Test
        id: build-test
        shell: bash
        working-directory: ${{runner.workspace}}/nmodl
        run:  |
          if [[ "${{ startsWith(matrix.os, 'macOS') }}" = "true" ]]; then
              export PATH=/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:$PATH;
              export CXX=g++;
              export CC=gcc;
          fi
          if [[ "${{ startsWith(matrix.os, 'ubuntu') }}" = "true" ]]; then
              export CXX=c++;
              export CC=cc;
          fi
          echo "------- Build, Test and Install -------"
          mkdir build && pushd build
          cmake .. -DPYTHON_EXECUTABLE=$(which python3) -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR
          make;
          if [ $? -ne 0 ]; then
            make VERBOSE=1;
          fi
          ctest -VV
          make install
         
        env:
          INSTALL_DIR: ${{ runner.workspace }}/install

      # This step will set up an SSH connection on tmate.io for live debugging.
      # To trigger it, simply add 'live-debug-tests' to your last pushed commit message
      - name: live debug session on failure
        if: failure() && contains(github.event.head_commit.message, 'live-debug-tests')
        uses: mxschmitt/action-tmate@v3

