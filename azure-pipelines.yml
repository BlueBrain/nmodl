#=============================================================================
# Azure Pipeline NMODL settings
#=============================================================================
variables:
  # defined in UI
  #- ReleaseWheelBuild: False
  #- UploadWheel: False
  buildWheel: ${{ or(in(variables['Build.Reason'], 'Schedule'), in(variables['Build.Reason'], 'Manual')) }}
  MACOSX_DEPLOYMENT_TARGET: 10.15

# Nightly build master for pypi upload
schedules:
- cron: "5 0 * * *"
  branches:
    include:
    - master
  always: True

# Auto cancel old PR builds
pr:
  autoCancel: true

# Trigger build for certain branches only
trigger:
- master
- llvm
- releases/*

stages:
- stage: fetch_config
  jobs:
  - job: github
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: none
    - script: |
        if [[ -z ${SYSTEM_PULLREQUEST_PULLREQUESTNUMBER+x} ]]; then
        echo "Not running on a PR."
        exit 0
        fi
        cat > parse_description.py << END_SCRIPT
        import os
        import re
        import requests
        pr_info = requests.get("https://api.github.com/repos/{}/pulls/{}".format(
                                os.environ['BUILD_REPOSITORY_NAME'],
                                os.environ['SYSTEM_PULLREQUEST_PULLREQUESTNUMBER']),
                               headers={'Accept': 'application/vnd.github.v3+json'})
        pr_body = pr_info.json()["body"]
        # match something like NEURON_BRANCH=foo/bar
        pat = re.compile('^([A-Z0-9_]+)_([A-Z]+)=([A-Z0-9\-\_\/\+]+)$', re.IGNORECASE)
        def parse_term(m):
          ref_type = m.group(2).lower()
          if ref_type not in {'branch', 'tag', 'ref'}: return
          variable = m.group(1).upper() + '_' + ref_type.upper()
          value = m.group(3)
          print('{}={}'.format(variable, value))
          print('#{}[task.setvariable variable={};isOutput=true]{}'.format('#vso', variable, value))
        if pr_body is not None:
          for pr_body_line in pr_body.splitlines():
            if not pr_body_line.startswith('CI_BRANCHES:'): continue
            for config_term in pr_body_line[12:].split(','):
              pat.sub(parse_term, config_term)
        END_SCRIPT
        echo '----'
        cat parse_description.py
        echo '----'
        python parse_description.py
      name: prdesc
- stage: build
  dependsOn: fetch_config
  variables:
    NEURON_BRANCH: $[stageDependencies.fetch_config.github.outputs['prdesc.NEURON_BRANCH']]
  jobs:
  - job: 'ubuntu2004'
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: 'Ubuntu (20.04), GCC 9.4'
    steps:
    - checkout: self
      submodules: False
    - script: |
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-add-repository -y ppa:deadsnakes/ppa
        sudo apt-get update
        sudo apt-get install -y g++-9 flex bison libfl-dev cython libx11-dev libxcomposite-dev libncurses-dev mpich
        sudo apt-get install -y python3.8 python3.8-dev python3.8-venv ninja-build
        sudo apt-get remove -y python3-importlib-metadata
        python3.8 -m pip install --upgrade pip setuptools
        python3.8 -m pip install --user -r requirements.txt
        # we manually get version 3.15.0 to make sure that changes in the cmake
        # files do not require unsupported versions of cmake in our package.
        wget --quiet --output-document=- "https://github.com/Kitware/CMake/releases/download/$CMAKE_VER/$CMAKE_PKG.tar.gz" | tar xzpf -
      env:
        CMAKE_VER: 'v3.15.0'
        CMAKE_PKG: 'cmake-3.15.0-Linux-x86_64'
      displayName: 'Install Dependencies'
    - script: |
        export PATH=$(pwd)/$CMAKE_PKG/bin:/home/vsts/.local/bin:$PATH
        export CXX='g++-9'
        mkdir -p $(Build.Repository.LocalPath)/build
        cd $(Build.Repository.LocalPath)/build
        cmake --version
        cmake .. -DPYTHON_EXECUTABLE=$(which python3.8) -DCMAKE_INSTALL_PREFIX=$HOME/nmodl -DCMAKE_BUILD_TYPE=Release
        make -j 2
        if [ $? -ne 0 ]
        then
          make VERBOSE=1
          exit 1
        fi
        make install #this is needed for the integration tests
        env CTEST_OUTPUT_ON_FAILURE=1 make test
      env:
        CMAKE_PKG: 'cmake-3.15.0-Linux-x86_64'
      displayName: 'Build and Run Unit Tests'
    - script: |
        export PATH=$(pwd)/$CMAKE_PKG/bin:/home/vsts/.local/bin:$PATH
        export CC='gcc-9'
        export CXX='g++-9'
        git clone${NEURON_BRANCH:+ --branch }${NEURON_BRANCH} --single-branch https://github.com/neuronsimulator/nrn.git
        mkdir nrn/build
        cd nrn/build
        cmake --version
        cmake .. -DNRN_ENABLE_CORENEURON=ON -DNRN_ENABLE_INTERVIEWS=OFF -DNRN_ENABLE_RX3D=OFF -DNRN_ENABLE_MPI=ON -DNRN_ENABLE_TESTS=ON -DCORENRN_ENABLE_NMODL=ON -DCORENRN_NMODL_DIR=$HOME/nmodl -Dnmodl_PYTHONPATH=$HOME/nmodl/lib -DPYTHON_EXECUTABLE=$(which python3.8) -DCORENRN_NMODL_FLAGS="sympy --analytic"
        make -j 2
        if [ $? -ne 0 ]
        then
          make VERBOSE=1
          exit 1
        fi
        ctest --output-on-failure
        if [ $? -ne 0 ]
        then
          exit 1
        fi
        ./bin/nrnivmodl-core $(Build.Repository.LocalPath)/test/integration/mod
      env:
        CMAKE_PKG: 'cmake-3.15.0-Linux-x86_64'
        SHELL: 'bash'
      displayName: 'Build Neuron and Run Integration Tests'
  - job: 'osx11'
    pool:
      vmImage: 'macOS-12'
    displayName: 'MacOS (12), AppleClang 14.0'
    steps:
    - checkout: self
      submodules: True
    - script: |
        brew install flex bison cmake python@3
        python3 -m pip install --upgrade pip setuptools
        python3 -m pip install --user -r requirements.txt
      displayName: 'Install Dependencies'
    - script: |
        export PATH=/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:$PATH;
        mkdir -p $(Build.Repository.LocalPath)/build
        cd $(Build.Repository.LocalPath)/build
        cmake .. -DPYTHON_EXECUTABLE=$(which python3) -DCMAKE_INSTALL_PREFIX=$HOME/nmodl -DCMAKE_BUILD_TYPE=RelWithDebInfo -DNMODL_ENABLE_PYTHON_BINDINGS=OFF
        make -j 2
        if [ $? -ne 0 ]
        then
          make VERBOSE=1
          exit 1
        fi
        ctest --output-on-failure
        if [ $? -ne 0 ]
        then
          exit 1
        fi
        make install
      displayName: 'Build and Run Tests'
    - script: |
        export PATH=$(pwd)/$CMAKE_PKG/bin:/home/vsts/.local/bin:$PATH
        export PATH=/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:$PATH;
        export CC='gcc'
        export CXX='g++'
        git clone${NEURON_BRANCH:+ --branch }${NEURON_BRANCH} --single-branch https://github.com/neuronsimulator/nrn.git
        mkdir nrn/build
        cd nrn/build
        cmake --version
        cmake .. -DNRN_ENABLE_CORENEURON=ON -DNRN_ENABLE_INTERVIEWS=OFF -DNRN_ENABLE_RX3D=OFF -DNRN_ENABLE_MPI=OFF -DNRN_ENABLE_TESTS=ON -DCORENRN_ENABLE_MPI=OFF -DCORENRN_ENABLE_NMODL=ON -DCORENRN_NMODL_DIR=$HOME/nmodl -Dnmodl_PYTHONPATH=$HOME/nmodl/lib -DPYTHON_EXECUTABLE=$(which python3) -DCORENRN_NMODL_FLAGS="sympy --analytic"
        make -j 2
        if [ $? -ne 0 ]
        then
          make VERBOSE=1
          exit 1
        fi
        ctest --output-on-failure
        if [ $? -ne 0 ]
        then
          exit 1
        fi
        ./bin/nrnivmodl-core $(Build.Repository.LocalPath)/test/integration/mod
      env:
        SHELL: 'bash'
      displayName: 'Build Neuron and Run Integration Tests'

  - job: 'manylinux_wheels'
    timeoutInMinutes: 90
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: UsePythonVersion@0
    - checkout: self
      submodules: True
      condition: succeeded()
    - script: |
        if [[ "$(RELEASEWHEELBUILD)" != "True" ]]; then
          export TAG="-nightly"
        else
          export TAG=""
        fi
        python3 -m pip install --upgrade pip
        python3 -m pip install cibuildwheel==2.16.5 tomli tomli-w
        # change the name accordingly
        python3 packaging/change_name.py pyproject.toml "NMODL${TAG}"
        export SETUPTOOLS_SCM_PRETEND_VERSION="$(git describe --tags | cut -d '-' -f 1,2 | tr - .)"
        CIBW_ENVIRONMENT_PASS_LINUX='SETUPTOOLS_SCM_PRETEND_VERSION' python3 -m cibuildwheel --output-dir wheelhouse
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'Building ManyLinux Wheels'
    - script: |
        if [[ "$(RELEASEWHEELBUILD)" != "True" ]]; then
          export TAG="-nightly"
        else
          export TAG=""
        fi
        python3 -m pip install --upgrade pip
        python3 -m pip install cibuildwheel==2.16.5 tomli tomli-w
        # change the name accordingly
        python3 packaging/change_name.py pyproject.toml "NMODL${TAG}"
        export SETUPTOOLS_SCM_PRETEND_VERSION="$(git describe --tags | cut -d '-' -f 1,2 | tr - .)"
        CIBW_BUILD="cp38* cp312*" CIBW_ENVIRONMENT_PASS_LINUX='SETUPTOOLS_SCM_PRETEND_VERSION' python3 -m cibuildwheel --output-dir wheelhouse
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
      displayName: 'Building ManyLinux Wheels (min a and max Python versions only)'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/wheelhouse'
      condition: succeeded()
      displayName: 'Publish wheel as build artifact'
    - template: ci/upload-wheels.yml

  - job: 'macos_wheels_x86_64'
    timeoutInMinutes: 45
    pool:
      vmImage: 'macOS-12'
    steps:
    - checkout: self
      submodules: True
      condition: succeeded()
    - script: |
        brew install flex bison cmake ninja
      condition: succeeded()
      displayName: 'Install Dependencies'
    - task: UsePythonVersion@0
    - script: |
        if [[ "$(RELEASEWHEELBUILD)" != "True" ]]; then
          export NMODL_NIGHTLY_TAG="-nightly"
        else
          export NMODL_NIGHTLY_TAG=""
        fi
        python3 -m pip install --upgrade pip
        python3 -m pip install cibuildwheel==2.16.5 tomli tomli-w
        # change the name accordingly
        python3 packaging/change_name.py pyproject.toml "NMODL${NMODL_NIGHTLY_TAG}"
        SETUPTOOLS_SCM_PRETEND_VERSION="$(git describe --tags | cut -d '-' -f 1,2 | tr - .)" python3 -m cibuildwheel --output-dir wheelhouse
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'Build macos Wheel (x86_64)'
    - script: |
        if [[ "$(RELEASEWHEELBUILD)" != "True" ]]; then
          export NMODL_NIGHTLY_TAG="-nightly"
        else
          export NMODL_NIGHTLY_TAG=""
        fi
        python3 -m pip install --upgrade pip
        python3 -m pip install cibuildwheel==2.16.5 tomli tomli-w
        # change the name accordingly
        python3 packaging/change_name.py pyproject.toml "NMODL${NMODL_NIGHTLY_TAG}"
        CIBW_BUILD="cp38* cp312*" SETUPTOOLS_SCM_PRETEND_VERSION="$(git describe --tags | cut -d '-' -f 1,2 | tr - .)" python3 -m cibuildwheel --output-dir wheelhouse
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
      displayName: 'Build macos Wheel (x86_64) (min and max Python versions only)'
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/wheelhouse'
      condition: succeeded()
      displayName: 'Publish wheel as build artifact'
    - template: ci/upload-wheels.yml

  - job: 'test_manylinux_wheels'
    dependsOn: 'manylinux_wheels'
    timeoutInMinutes: 45
    pool:
      vmImage: 'ubuntu-20.04'
    strategy:
      matrix:
        ${{ if eq(variables.buildWheel, True) }}:
          Python38:
            python.version: '3.8'
          Python39:
            python.version: '3.9'
          Python310:
            python.version: '3.10'
          Python311:
            python.version: '3.11'
          Python312:
            python.version: '3.12'
        ${{ if eq(variables.buildWheel, False) }}:
          Python311:
            python.version: '3.11'
    steps:
    - download: current
      patterns: 'drop/*.whl'
      displayName: "Make manylinux wheels available"
    - script: |
        set -eux
        sudo apt-add-repository -y ppa:deadsnakes/ppa
        sudo apt-get update
        sudo apt-get install -y python$(python.version) python$(python.version)-dev python$(python.version)-venv
        dotless_version="$(echo "$(python.version)" | tr -d '.')"
        find $(Pipeline.Workspace) -name "*cp${dotless_version}-manylinux*.whl" -exec bash packaging/test_wheel.bash python$(python.version) {} \;
      condition: succeeded()
      displayName: 'Test manylinux Wheel with Python $(python.version)'
