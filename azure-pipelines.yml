#=============================================================================
# Azure Pipeline NMODL settings
#=============================================================================
variables:
  # defined in UI
  #- ReleaseWheelBuild: False
  #- NightlyWheelBuild: False
  buildWheel: $[or(in(variables['Build.Reason'], 'Schedule'),
              and(in(variables['Build.Reason'], 'Manual'), eq(variables.NightlyWheelBuild, True)))]
  ${{ if eq(variables['buildWheel'], 'True') }}:
    matrix_build: { Python36: { python.version: '3.6' }, Python37: { python.version: '3.7' }, Python38: { python.version: '3.8' }, Python39: { python.version: '3.9' }}
  ${{ if eq(variables['buildWheel'], 'False') }}:
    matrix_build: { Python39: { python.version: '3.9' }}


# Nightly build master for pypi upload
schedules:
- cron: "5 0 * * *"
  branches:
    include:
    - master
  always: True

# Trigger build for certain branches only
trigger:
- master
- llvm
- releases/*

jobs:
- job: 'ubuntu1604'
  pool:
    vmImage: 'ubuntu-16.04'
  displayName: 'Ubuntu (16.04), GCC 8.3'
  steps:
  - checkout: self
    submodules: False
  - script: |
      sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
      sudo apt-add-repository -y ppa:deadsnakes/ppa
      sudo apt update
      sudo apt install -y g++-8 flex bison
      sudo apt-get install -y python3.7 python3.7-dev python3.7-venv
      python3.7 -m pip install -U pip setuptools
      python3.7 -m pip install --user 'Jinja2>=2.9.3' 'PyYAML>=3.13' pytest 'sympy>=1.3,<1.6'
      # we manually get version 3.10.2 to make sure that changes in the cmake
      # files do not require unsupported versions of cmake in our package. 
      wget "https://github.com/Kitware/CMake/releases/download/v3.10.2/$CMAKE_PKG.tar.gz" && tar xzpvf $CMAKE_PKG.tar.gz
      # install ISPC compiler for integration testing
      ispc_version="v1.12.0";
      url_os="linux";
      ispc_version_suffix="b";
      url="https://github.com/ispc/ispc/releases/download/${ispc_version}/ispc-${ispc_version}${ispc_version_suffix}-${url_os}.tar.gz";
      wget -O ispc.tar.gz $url;
      mkdir $(pwd)/$CMAKE_PKG/ispc && tar -xvzf ispc.tar.gz -C $(pwd)/$CMAKE_PKG/ispc --strip 1;
    env:
      CMAKE_PKG: 'cmake-3.10.2-Linux-x86_64'
    displayName: 'Install Dependencies'
  - script: |
      export PATH=$(pwd)/$CMAKE_PKG/bin:/home/vsts/.local/bin:$PATH
      export CXX='g++-8'
      mkdir -p $(Build.Repository.LocalPath)/build
      cd $(Build.Repository.LocalPath)/build
      cmake --version
      cmake .. -DPYTHON_EXECUTABLE=$(which python3.7) -DCMAKE_INSTALL_PREFIX=$HOME/nmodl -DCMAKE_BUILD_TYPE=Release
      make -j 2
      if [ $? -ne 0 ]
      then
        make VERBOSE=1
      fi
      make install #this is needed for the integration tests
      env CTEST_OUTPUT_ON_FAILURE=1 make test
    env:
      CMAKE_PKG: 'cmake-3.10.2-Linux-x86_64'
    displayName: 'Build and Run Unit Tests'
  - script: |
      export PATH=$(pwd)/$CMAKE_PKG/bin:/home/vsts/.local/bin:$PATH
      export CXX='g++-8'
      git clone --recursive https://github.com/BlueBrain/CoreNeuron.git
      mkdir CoreNeuron/build
      cd CoreNeuron/build
      cmake --version
      cmake .. -DCORENRN_ENABLE_MPI=OFF -DCORENRN_ENABLE_NMODL=ON -DCORENRN_NMODL_DIR=$HOME/nmodl -Dnmodl_PYTHONPATH=$HOME/nmodl/lib -DPYTHON_EXECUTABLE=$(which python3.7) -DCORENRN_NMODL_FLAGS="sympy --analytic"
      make -j 2
      if [ $? -ne 0 ]
      then
        make VERBOSE=1
      fi
      make test
      ./bin/nrnivmodl-core $(Build.Repository.LocalPath)/test/integration/mod
    env:
      CMAKE_PKG: 'cmake-3.10.2-Linux-x86_64'
    displayName: 'Build CoreNEURON and Run Integration Tests'
  - script: |
      export PATH=$(pwd)/$CMAKE_PKG/bin:/home/vsts/.local/bin:$PATH
      export CXX='g++-8'
      git clone --recursive https://github.com/BlueBrain/CoreNeuron.git
      mkdir CoreNeuron/build_ispc
      cd CoreNeuron/build_ispc
      cmake --version
      cmake .. -DCORENRN_ENABLE_MPI=OFF -DCORENRN_ENABLE_NMODL=ON -DCORENRN_NMODL_DIR=$HOME/nmodl -DPYTHON_EXECUTABLE=$(which python3.7) -DCORENRN_NMODL_FLAGS="sympy --analytic" -DCORENRN_ENABLE_ISPC=ON -DCMAKE_ISPC_COMPILER=$(Build.Repository.LocalPath)/$CMAKE_PKG/ispc/bin/ispc
      make -j 2
      if [ $? -ne 0 ]
      then
        make VERBOSE=1
      fi
      make test
      ./bin/nrnivmodl-core $(Build.Repository.LocalPath)/test/integration/mod
    env:
      CMAKE_PKG: 'cmake-3.10.2-Linux-x86_64'
    displayName: 'Build CoreNEURON and Run Integration Tests with ISPC compiler'
- job: 'osx1014'
  pool:
    vmImage: 'macOS-10.14'
  displayName: 'MacOS (10.14), AppleClang 10.0'
  steps:
  - checkout: self
    submodules: True
  - script: |
      brew install flex cmake python@3
      brew install bison
      python3 -m pip install -U pip setuptools
      python3 -m pip install --user 'Jinja2>=2.9.3' 'PyYAML>=3.13' pytest 'sympy>=1.3'
    displayName: 'Install Dependencies'
  - script: |
      export PATH=/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:$PATH;
      mkdir -p $(Build.Repository.LocalPath)/build
      cd $(Build.Repository.LocalPath)/build
      cmake .. -DPYTHON_EXECUTABLE=$(which python3) -DCMAKE_INSTALL_PREFIX=$HOME/nmodl -DCMAKE_BUILD_TYPE=RelWithDebInfo -DNMODL_ENABLE_PYTHON_BINDINGS=OFF
      make -j 2
      if [ $? -ne 0 ]
      then
        make VERBOSE=1
      fi
      env CTEST_OUTPUT_ON_FAILURE=1 make test
    displayName: 'Build and Run Tests'
- job: 'manylinux_wheels'
  timeoutInMinutes: 45
  pool:
    vmImage: 'ubuntu-18.04'
  strategy:
    matrix: ${{ variables.matrix_build }}
  steps:
  - checkout: self
    submodules: True
    condition: and(succeeded(), or(eq(variables.buildWheel, True), eq(variables['python.version'], '3.9')))
  - script: |
      if [ "$(buildWheel)" == "True" ]; then
        export TAG="-nightly"
      else
        export TAG=""
      fi
      docker run --rm \
        -w /root/nmodl \
        -v $PWD:/root/nmodl \
        -e NMODL_NIGHTLY_TAG=$TAG \
        'bluebrain/nmodl:wheel' \
        packaging/build_wheels.bash linux $(python.version)
    condition: and(succeeded(), or(eq(variables.buildWheel, True), eq(variables['python.version'], '3.9')))
    displayName: 'Building ManyLinux Wheel'
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.SourcesDirectory)/wheelhouse'
    condition: and(succeeded(), or(eq(variables.buildWheel, True), eq(variables['python.version'], '3.9')))
    displayName: 'Publish wheel as build artifact'
  - script: |
      sudo apt-add-repository -y ppa:deadsnakes/ppa
      sudo apt update
      sudo apt-get install -y python$(python.version) python$(python.version)-dev python$(python.version)-venv
      packaging/test_wheel.bash python$(python.version) wheelhouse/*.whl
    condition: and(succeeded(), or(eq(variables.buildWheel, True), eq(variables['python.version'], '3.9')))
    displayName: 'Test ManyLinux Wheel with Python $(python.version)'
  - template: ci/upload-wheels.yml
- job: 'macos_wheels'
  timeoutInMinutes: 45
  pool:
    vmImage: 'macOS-10.15'
  strategy:
    matrix: ${{ variables.matrix_build }}
  steps:
  - checkout: self
    submodules: True
    condition: and(succeeded(), or(eq(variables.buildWheel, True), eq(variables['python.version'], '3.9')))
  - script: |
      brew install flex bison cmake
      export PATH=/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:$PATH;
    condition: and(succeeded(), or(eq(variables.buildWheel, True), eq(variables['python.version'], '3.9')))
    displayName: 'Install Dependencies'
  - script: |
      installer=python-$(python.org.version)-macosx10.9.pkg
      url=https://www.python.org/ftp/python/$(python.org.version)/$installer
      curl $url -o $installer
      sudo installer -pkg $installer -target /
    condition: and(succeeded(), or(eq(variables.buildWheel, True), eq(variables['python.version'], '3.9')))
    displayName: 'Install Python from python.org'
  - script: |
      export MACOSX_DEPLOYMENT_TARGET=10.9
      export PATH=/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:$PATH
      export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
      if [ "$(buildWheel)" == "True" ]; then
        export NMODL_NIGHTLY_TAG="-nightly"
      else
        export NMODL_NIGHTLY_TAG=""
      fi
      packaging/build_wheels.bash osx $(python.version)
    condition: and(succeeded(), or(eq(variables.buildWheel, True), eq(variables['python.version'], '3.9')))
    displayName: 'Build macos Wheel'
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.SourcesDirectory)/wheelhouse'
    condition: and(succeeded(), or(eq(variables.buildWheel, True), eq(variables['python.version'], '3.9')))
    displayName: 'Publish wheel as build artifact'
  - script: |
      packaging/test_wheel.bash python$(python.version) wheelhouse/*.whl
    condition: and(succeeded(), or(eq(variables.buildWheel, True), eq(variables['python.version'], '3.9')))
    displayName: 'Test macos Wheel with Python $(python.version)'
  - template: ci/upload-wheels.yml
